// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Kullanıcı modeli
model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String
  username        String          @unique
  role            Role            @default(USER)
  address         String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  serviceRequests ServiceRequest[]
  blogPosts       BlogPost[]
}

enum Role {
  USER
  ADMIN
}

// Servis talebi modeli
model ServiceRequest {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  deviceType    String
  brand         String
  model         String
  problem       String          @db.Text
  status        Status          @default(PENDING)
  trackingCode  String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  statusUpdates StatusUpdate[]
}

enum Status {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

// Servis durumu güncellemeleri
model StatusUpdate {
  id              String        @id @default(cuid())
  serviceRequestId String
  serviceRequest  ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  status          Status
  note            String?       @db.Text
  createdAt       DateTime      @default(now())
}

// Blog kategorileri
model BlogCategory {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  posts     BlogPost[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Blog yazıları
model BlogPost {
  id          String       @id @default(cuid())
  title       String
  content     String       @db.Text
  excerpt     String?      @db.Text
  slug        String       @unique
  imageUrl    String?
  published   Boolean      @default(false)
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  categoryId  String
  category    BlogCategory @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Hizmetler
model Service {
  id               String    @id @default(cuid())
  title            String
  description      String    @db.Text
  shortDescription String    @db.Text
  price            Float?
  imageUrl         String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// İletişim mesajları
model ContactMessage {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String    @db.Text
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())
}

// Site ayarları
model Setting {
  key         String    @id
  value       String    @db.Text
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Anonim servis talebi modeli
model AnonymousServiceRequest {
  id              String    @id @default(cuid())
  name            String
  email           String
  phone           String
  address         String?   @db.Text
  deviceType      String
  brand           String
  model           String
  serialNumber    String?
  purchaseDate    DateTime?
  problemCategory String
  problem         String    @db.Text
  additionalNotes String?   @db.Text
  status          Status    @default(PENDING)
  trackingCode    String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
